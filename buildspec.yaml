version: 0.2 # this is the version for the buildspec parser, not the file version

env:
  git-credential-helper: yes

  parameter-store:
    NPM_USER: /CodeBuild/general/npm_username
    NPM_PASS: /CodeBuild/general/npm_password
    NPM_EMAIL: /CodeBuild/general/npm_email

phases:
  install:
    runtime-versions:
      nodejs: 12
      python: 3.7 # pre-commit hooks often use Python, so make sure to pin python version
    commands:
      - node --version
      - npm --version
      - python --version
      - echo "Git Branch information:"
      - git branch -av
      - SHA_OF_REMOTE_MAIN=$(git branch -av | grep remotes/origin/main | grep -oP "main\s+\K\w+")
      - SHA_OF_REMOTE_DEVELOPMENT=$(git branch -av | grep remotes/origin/development | grep -oP "development\s+\K\w+")
      # In CodeBuild, sometimes a direct SHA is grabbed rather than a branch, so the 'name' of the branch is listed as: (no branch)
      #   So can't use traditional grep to just check that the name of the current branch is 'main', have to explicitly check the SHAs
      - SHA_OF_LOCAL_COMMIT=$(git branch -av | grep "*" | grep -oP " \s+\K\w+")
      - 'PACKAGE_VERSION=$(grep -Po "(?<=  \"version\"\: \")[0-9.]+" package.json)'
      - 'echo "SHA of local commit: $SHA_OF_LOCAL_COMMIT"'
      - 'echo "SHA of remote development: $SHA_OF_REMOTE_DEVELOPMENT"'
      - 'echo "SHA of remote main: $SHA_OF_REMOTE_MAIN"'
      - 'echo "Current Package Version: $PACKAGE_VERSION"'
      - 'if [ "$SHA_OF_LOCAL_COMMIT" = "$SHA_OF_REMOTE_MAIN" ]; then echo "This is the main branch."; else echo "This is not the main branch."; fi'
      - 'if [ "$SHA_OF_LOCAL_COMMIT" = "$SHA_OF_REMOTE_DEVELOPMENT" ]; then echo "This is the development branch."; else echo "This is not the development branch."; fi'
      - echo "Creating virtual environment for Python" # sometimes pre-commit can have odd issues when not in venv (Eli 4/6/20)
      - python -m venv venv
      - echo "Entering virtual environment"
      - . venv/bin/activate
      - pip freeze
      - pip install pip==20.0.2 --upgrade # Eli (4/3/20) no known specific reason for this version, just pinning the version for consistency
      - echo "Installing npm packages directly from package-lock.json. Package.json is configured to install pre-commit hooks as well."
      - npm ci --unsafe-perm # not sure why CodeBuild fails without the --unsafe-perm flag, but it seems to help when running the "prepare" scripts after the install https://stackoverflow.com/questions/18136746/npm-install-failed-with-cannot-run-in-wd
      - pip freeze # python dev packages are installed at the end of npm ci because Package-json is configured to install them

  pre_build:
    commands:
      - echo "Running pre-commit hooks on all the files"
      - pre-commit run -a
      - echo "Building Sphinx documentation"
      - SPHINXOPTS="-W" make --directory=docs html # the -W flag treats warnings as errors to cause build failures

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Building package"
      - npm run build
      - npm run test:unit-no-prebuild -- --ci
      - npm run test:e2e-no-prebuild-codebuild
      # Only run the following command if the PUBLISH_TO_NPM environmental variable is set to 1 https://stackoverflow.com/questions/39619956/short-way-to-run-command-if-variable-is-set  (extra outer parentheses needed to make YAML parser happy)
      # Grab the version from the setup.py file using a grep "look-behind" https://stackoverflow.com/questions/30776265/how-to-grep-for-value-in-a-key-value-store-from-plain-text
      # If this is attempted on any branch other than main, it should fail because the role only has permission to push to the main branch
      # Colon (or maybe semi-colon) is causing issue with CodeBuild YAML parser, so needed to wrap whole command in single quote
      - 'if [ "$PUBLISH_TO_NPM" = "1" ] ; then if [ "$SHA_OF_LOCAL_COMMIT" = "$SHA_OF_REMOTE_MAIN" ]; then echo "Current branch matches SHA of remote main ($SHA_OF_REMOTE_MAIN) so tags are allowed"; else echo "Current branch is not main. SHA of current commit is $SHA_OF_LOCAL_COMMIT but SHA of remote main is $SHA_OF_REMOTE_MAIN" && exit 1; fi && npm install -g npm-cli-login@0.1.1 && npm-cli-login && echo "Applying tag to commit" && git tag "$(grep -Po "(?<=  \"version\"\: \")[0-9.]+" package.json)" && echo "Tag applied, attempting to push" && git push --tags && npm publish --access public; fi'
      - echo "Build completed on $(date)"

artifacts:
  files:
    - "__coverage__/**/*"
    - "e2e/screenshots/**/*"

  name: mantarray-frontend-components-test-artifacts-$(date +'%y%m%d%H%M%S')--$CODEBUILD_BUILD_NUMBER
  base-directory: tests/
